#+title:      red black tree
#+date:       [2022-10-25 Tue 18:19]
#+filetags:   :datastructure:knowledge:programming:
#+identifier: 20221025T181909

* Intro
The [[https://en.wikipedia.org/wiki/Red%E2%80%93black_tree][red black trees]] are a class of [[https://en.wikipedia.org/wiki/Binary_search_tree][BST]] with a logarithmic height.
They are the must used kind of tree in practical because they need less operation to keep the logarithmic height compared to other class of trees such as the [[denote:20221025T093213][AVLs]].
* Property
The red black tree are described by 4 property:
1. The leaf node are a special node, the */NIL/* node.
2. Each node is */RED/* xor */XOR/*.
3. The ~NIL~ nodes are black.
4. If a node is ~RED~ both it's children are ~BLACK~
5. For all simple path from the root to the leaf ~NIL~, all the path have the same number of black nodes. (~Black height property~)
* Proof of the logarithmic height
** Lemma, lower bound for internal nodes.
Consider the function ~N(x)~ that takes in input a Red-Black tree, an return a lower bound on the internal node of the tree.
+ ~N(x)~, ~x ∈ Red-Black~ → ~N(x) ≥ number of internal node~
+ The effective formula is ~N(x) ≥ 2^bh(x) - 1~, where ~bh(x)~ return the black height of ~x~.
*** Proof
Proof by induction.
It's important to choose well on wich variable I will do induction, I can't do induction on ~bh(x)~ because it may not vary on the same way on the subtrees, so I will do induction on the ~height(x)~.
**** Base case, ~height(x) = 0~
In this case ~X~ is composed only by a ~NIL~ leaf, so:
1. ~N(NIL) ≥ 2^bh(NIL) - 1~ → ~0 ≥ 2^0 - 1~ → ~0 ≥ 0~
2. In a ~NIL~ leaf node the tree has ~0~ internal node.
3. The base case is true.
**** Induction
Assume true for ~height(x) = h - 1~, prove for ~height(x) = h~.
The number of internals node of ~x~, where ~height(x) = h~ is equal to the number of internal nodes on the left subtree ~x.left~, plus the number of nodes on the right subtree ~x.right~, plus ~1~ for the root.
Since ~height(x.left) and height(x.right) < h~ I can use the induction hypothesis.
1. ~N(x) = N(x.left) + N(x.right) + 1~
2. ~N(x) = (2^(bh(x) - 1) - 1) + (2^bh(x) - 1) - 1~
3. ~N(x) = 2*2^(bh(x) - 1) -2 + 1~
4. ~N(x) = 2^bh(x) - 1~
5. QED ∎.
** Logarithmic height
The Red-Black trees have ~h = Θ(lg n)~
*** Proof
1. Consider ~T ∈ Red-Black~.
2. Apply the previous lemma on the root of ~T~.
3. ~N(T) > 2^bh(T) - 1~
4. Since at most half of the nodes from the root the leaf are black (this derive from the black height property, just interleave a black level and a red level), this formula eval to:
5. ~n ﹥ 2^(h/2) - 1~ where ~n~ are the number of nodes and ~h~ is the height of the tree T.
6. ~n + 1 ﹥ 2^(h/2)~
7. ~lg(n + 1) ﹥  h/2~
8. ~2 * lg(n + 1) ﹥ h~
9. QED ∎.
*** Bound for the /unbalancing/
The proof shows also the max bound for the unbalancing between subtrees.
Note that ~2 ﹥ 1.44~, where ~1.44~ is the constant for the unbalancing of the AVL Trees, hence The Red-Black admit a bigger gap between subtrees, this means that they need to unbalanced less than AVL.
This small difference makes the RedBlack the most used in practice.
* How the Rebalancing work
Red Black trees have different rebalancing for insertion and deletion.
I will explain only the left balancing algo, on the right they are dual, just invert ~left~ with ~right~ and viceversa.
** NOTE
+ ~B~ indicates a black node
+ ~R~ indicates a red node
+ ~2B~ indicates a doubl black node
+ ~RB~ indicates that the node could be ~RED~ or ~BLACK~
+ ~2BB~ indicates that the node could be ~DOUBLE BLACK~ or ~BLACK~
** Insertion
During the insertion, the new node insert is colored in red so it don't change the black height (which is the most important property), but It can violate the property that no RED node can have a RED child.
Resolve the second problem is simpler than the first.
There are 3 case of violation.
*** Type 1
#+begin_example
          B                B
        /   \             / \
      R      R   OR      R   R
     /                    \
    R                      R
#+end_example
**** Resolution
Can be resolved locally in the following way:
#+begin_example
          R                R
        /   \             / \
      B      B   OR      B   B
     /                    \
    R                      R
#+end_example
Note that in the considered subtree there are no violation of the Red-Black property, but the root is red so there could be a violation on tree above.
If a balance operation keep fall on ~TYPE 1~ it will reach the root, then if the root is repainted in ~BLACK~ all the property are restored.
*** Type 2
#+begin_example
          B
        /   \
      R      B
       \
        R
#+end_example
**** Resolution
This ~TYPE 2~ is not resolutive, but it change to a ~TYPE 3~ which is resolutive.
#+begin_example
          B
        /   \
      R      B
     /
    R
#+end_example
*** Type 3
#+begin_example
          B
        /   \
      R      B
     /
    R
#+end_example
**** Resolution
Perform a clockwise rotation on the root and recolor some nodes.
#+begin_example
          B
        /   \
      R      R
              \
               B
#+end_example
*** Detect violation
They are pretty simple, they just check which topology the subtreess has, if is one of the above return the corresponding enum of the violation.
** Deletion
During the deletion the Red-Black the only property that could be violated is the black height.
If the operation remove a black node, say ~X~, the black height will change.
To solve that, the balance operation will color the node that substitute ~X~ (if ~X~ was ~BLACK~ and the substitute is not ~RED~) as ~DOUBLE BLACK~ an try to redistribute that extra black somewhere.
*** Type 1
#+begin_example
         B
       /   \
      DB    R
           / \
          B   B
#+end_example
**** Resolution
Perform a counter clockwise rotation on the root and recolor the following nodes.
#+begin_example
         B
      /    \
    R       B
   / \
  DB  B
#+end_example
This don't solve the problem, but now the left subtree is a violation of ~TYPE 2~ with a ~RED~ root which is resolutive, or one of the other (~TYPE 3~, ~TYPE 4~) that will be also resolutive.
So to terminate this case, the algo need to apply balance ~TYPE 2~ on the left subtree.
*** Type 2
#+begin_example
        RB
       /  \
      DB   B
          / \
         B   B
#+end_example
**** Resolution
#+begin_example
       2BB
       /  \
      B    R
          / \
         B   B
#+end_example
Move the violation up on tree, if the root was previous ~RED~ this will be resolutive (example: comes from ~TYPE 1~).
*** Type 3
#+begin_example
        RB
       /  \
      DB   B
          / \
         R   B
#+end_example
**** Resolution
Perform a clockwise rotation on the right subtree and recolor the nodes in the following way.
#+begin_example
        RB
       /  \
      B    B
          / \
         B   R
            / \
           B   B
#+end_example
This is not resolutive, but it will change in a ~TYPE 4~ which will be resolutive.
*** Type 4
#+begin_example
        RB
       /  \
      DB   B
          / \
         RB  R
            / \
           B   B
#+end_example
**** Resolution
Perform a counter clockwiser rotation on the root.
#+begin_example
          B
        /   \
       RB    R
      / \   / \
     DB RB  B  B
#+end_example
Know there are some recoloration to perform, but there is a particular order.
1. ~T.right.color = RED~
2. ~T.color = T.left.color~ (remember this could be ~RB~, so it need to retur on the root)
3. ~T.left.color = BLACK~, pop the double black from the violation
4. ~T.left.left.color = BLACK~, remove definitely the ~DOUBLE BLACK~
*** Detect violation (same concepts as the insertion)
They are pretty simple, they just check which topology the subtreess has, if is one of the above return the corresponding enum of the violation.
* Code
** Constants and Types definition
#+begin_src go
type Color int
type InsertViolation int
type DeleteViolation int

const (
	RED Color = iota
	BLACK
	DOUBLE_BLACK
)

const (
	INS_TYPE_1 InsertViolation = iota
	INS_TYPE_2
	INS_TYPE_3
	INS_NONE
)

const (
	DEL_TYPE_1 DeleteViolation = iota
	DEL_TYPE_2
	DEL_TYPE_3
	DEL_TYPE_4
	DEL_NONE
)
#+end_src
** Structure of a node
#+begin_src go
type Node struct{
	key int
	color Color
	height int // just to see if the height is approximately logarithmic
	left *Node
	right *Node
}
#+end_src
** Structure of a tree
#+begin_src go
type Tree struct{
	root *Node
}
// This represent a NIL leaf
var leaf = &Node{0, BLACK, 0, nil, nil}
// Simply way to use a single instance for all the leaf.
// This is not a good implementation.
#+end_src
** Utility functions
*** Init Tree
#+begin_src go
func initTree() Tree{
	var t Tree
	t.root = leaf
	leaf.left, leaf.right = leaf, leaf
	return t
}
#+end_src
*** Max
#+begin_src go
func max(a, b int) int {
	if a <= b {
		return b
	}
	return a
}
#+end_src
*** Update Height
#+begin_src go
func (n *Node) updateHeight() *Node {
	if !n.isLeaf() {
		n.height = 1 + max(n.left.height, n.right.height)
	}
	return n
}
#+end_src
*** Is Red
#+begin_src go
func (n *Node) isRed() bool {
	return n.color == RED
}
#+end_src
*** Is Double Black
#+begin_src go
func (n *Node) isDoubleBlack() bool {
	return n.color == DOUBLE_BLACK
}
#+end_src
*** Is Leaf
#+begin_src go
func (n *Node) isLeaf() bool {
	return n == leaf
}
#+end_src
*** Propagate Black
#+begin_src go
func (n *Node) propagateBlack() *Node {
	if ! n.isRed() {
		n.color = DOUBLE_BLACK
	} else {
		n.color = BLACK
	}
	return n
}
#+end_src
*** Minimum Deconnection
#+begin_src go
func minimumDeconnection(child, parent *Node) *Node {
	var tmp *Node
	if child.left.isLeaf() {
		tmp = child
		if child == parent.left {
			parent.left = child.right
			parent = parent.balanceRemoveLeft()
		} else {
			parent.right = child.right
			parent = parent.balanceRemoveRight()
		}
	} else {
		tmp = minimumDeconnection(child.left, child)
		tmp = tmp.balanceRemoveLeft()
	}
	return tmp
}
#+end_src
*** Delete Root
#+begin_src go
func (n *Node) deleteRoot() *Node {
	if n.left.isLeaf() || n.right.isLeaf() {
		tmp := n
		if n.left.isLeaf() {
			n = n.right
		} else {
			n = n.left
		}
		if !tmp.isRed() {
			n = n.propagateBlack()
		}
		tmp = nil // help the garbage collector
	} else {
		tmp := minimumDeconnection(n.right, n)
		tmp.left, tmp.right = n.left, n.right
		tmp = tmp.balanceRemoveRight()
		if !n.isRed() {
			n = n.propagateBlack()
		}
		n = tmp
	}
	return n
}
#+end_src
** Rotation
The rotation don't update the color, this action will be performed by fixup/rebalancing function.
*** Clockwise
#+begin_src go
func (n *Node) clockwise() *Node {
	pivot := n.left
	n.left = pivot.right
	pivot.right = n
	n = n.updateHeight()
	pivot = pivot.updateHeight()
	return pivot
}
#+end_src
*** Counterclockwiese
#+begin_src go
func (n *Node) counterClockwise() *Node {
	pivot := n.right
	n.right = pivot.left
	pivot.left = n
	n = n.updateHeight()
	pivot = pivot.updateHeight()
	return pivot
}
#+end_src
** Insert function
*** Insert into the tree
#+begin_src go
func (t *Tree) Insert(key int) {
	t.root = t.root.insert(key)
	t.root.color = BLACK
}
#+end_src
*** Recursive insert the node
#+begin_src go
func (n *Node) insert(key int) *Node {
	if n == leaf {
		n = &Node{key, RED, 0, leaf, leaf}
	} else {
		if n.key > key {
			n.left = n.left.insert(key)
			n = n.balanceInsertLeft()
			n = n.updateHeight()
		} else if n.key < key {
			n.right = n.right.insert(key)
			n = n.balanceInsertRight()
			n = n.updateHeight()
		} else {
			// Do nothing
			// Here you can update a key, etc...
		}
	}
	return n
}
#+end_src
*** Insert Balance operation
**** Balance Left Code
#+begin_src go
func (n *Node) balanceInsertLeft() *Node {
	switch n.typeOfViolationInsertLeft() {
	case INS_TYPE_1:
		n.left.color, n.right.color = BLACK, BLACK
		n.color = RED
	case INS_TYPE_2:
		n.left = n.left.counterClockwise()
		fallthrough
	case INS_TYPE_3:
		n = n.clockwise()
		n.color = BLACK
		n.right.color = RED
	}
	return n
}
#+end_src
**** Balance Right Code
#+begin_src go
func (n *Node) balanceInsertRight() *Node {
	switch n.typeOfViolationInsertRight() {
	case INS_TYPE_1:
		n.left.color, n.right.color = BLACK, BLACK
		n.color = RED
	case INS_TYPE_2:
		n.right = n.right.clockwise()
		fallthrough
	case INS_TYPE_3:
		n = n.counterClockwise()
		n.color = BLACK
		n.left.color = RED
	}
	return n
}
#+end_src
**** Detect violation
***** Left
#+begin_src go
func (n *Node) typeOfViolationInsertLeft() InsertViolation {
	violation := INS_NONE
	if n.left.isRed() {
		if n.left.left.isRed() || n.left.right.isRed() {
			if n.right.isRed(){
				violation = INS_TYPE_1
			} else{
				if n.left.right.isRed() {
					violation = INS_TYPE_2
				} else {
					violation = INS_TYPE_3
				}
			}
		}
	}
	return violation
}
#+end_src
***** Right
#+begin_src go
func (n *Node) typeOfViolationInsertRight() InsertViolation {
	violation := INS_NONE
	if n.right.isRed() {
		if n.right.right.isRed() || n.right.left.isRed() {
			if n.left.isRed() {
				violation = INS_TYPE_1
			} else {
				if n.right.left.isRed() {
					violation = INS_TYPE_2
				} else {
					violation = INS_TYPE_3
				}
			}
		}
	}
	return violation
}
#+end_src
** Delete function
*** Delete into the tree
#+begin_src go
func (t *Tree) Remove(key int) {
	t.root = t.root.remove(key)
}
#+end_src
*** Recursive delete the node
#+begin_src go
func (n *Node) remove(key int) *Node{
	if !n.isLeaf() {
		if n.key > key {
			n.left = n.left.remove(key)
			n = n.balanceRemoveLeft()
		} else if n.key < key {
			n.right = n.right.remove(key)
			n = n.balanceRemoveRight()
		} else {
			n = n.deleteRoot()
		}
	}
	return n
}
#+end_src
*** Delete Balance operation
**** Balance Left Code
#+begin_src go
func (n *Node) balanceRemoveLeft() *Node {
	switch typeOfViolationDeleteLeft(n) {
	case DEL_TYPE_1:
		n = n.counterClockwise()
		n.left.color = RED
		n.color = BLACK
		n.left = n.left.balanceRemoveLeft()
	case DEL_TYPE_2:
		n.right.color = RED
		n.left.color = BLACK
		n = n.propagateBlack()
	case DEL_TYPE_3:
		n.right = n.right.clockwise()
		n.right.color = BLACK
		n.right.right.color = RED
	case DEL_TYPE_4:
		n = n.counterClockwise()
		n.right.color = BLACK
		n.color = n.left.color
		n.left.color = BLACK
		n.left.left.color = BLACK
	}
	return n
}
#+end_src
**** Balance Right Code
#+begin_src go
func (n *Node) balanceRemoveRight() *Node {
	switch DEL_NONE {
	case DEL_TYPE_1:
		n = n.clockwise()
		n.right.color = RED
		n.color = BLACK
		n.right = n.right.balanceRemoveRight()
	case DEL_TYPE_2:
		n.left.color = RED
		n.right.color = BLACK
		n = n.propagateBlack()
	case DEL_TYPE_3:
		n.left = n.left.counterClockwise()
		n.left.color = BLACK
		n.left.left.color = RED
	case DEL_TYPE_4:
		n = n.clockwise()
		n.left.color = BLACK
		n.color = n.right.color
		n.right.color = BLACK
		n.right.right.color = BLACK
	}
	return n
}
#+end_src
**** Detect violation
***** Left
#+begin_src go
func typeOfViolationDeleteLeft(n *Node) DeleteViolation {
	violation := DEL_NONE
	if n.left.isDoubleBlack() {
		if n.right.isRed() {
			violation = DEL_TYPE_1
		} else{
			if !n.right.left.isRed() && !n.right.right.isRed() {
				violation = DEL_TYPE_2
			} else {
				violation = DEL_TYPE_3
				if n.right.right.isRed() {
					violation = DEL_TYPE_4
				}
			}
		}
	}
	return violation
}
#+end_src
***** Right
#+begin_src go
func typeOfViolationDeleteRight(n *Node) DeleteViolation {
	violation := DEL_NONE
	if n.right.isDoubleBlack(){
		if n.left.isRed() {
			violation = DEL_TYPE_1
		} else {
			if !n.left.left.isRed() && !n.left.right.isRed() {
				violation = DEL_TYPE_2
			} else {
				violation = DEL_TYPE_3
				if n.left.left.isRed() {
					violation = DEL_TYPE_4
				}
			}

		}
	}
	return violation
}
#+end_src
** Source code
*** Source
#+begin_src go
package main

import "fmt"

type Color int
type InsertViolation int
type DeleteViolation int

const (
	RED Color = iota
	BLACK
	DOUBLE_BLACK
)

const (
	INS_TYPE_1 InsertViolation = iota
	INS_TYPE_2
	INS_TYPE_3
	INS_NONE
)

const (
	DEL_TYPE_1 DeleteViolation = iota
	DEL_TYPE_2
	DEL_TYPE_3
	DEL_TYPE_4
	DEL_NONE
)

type Node struct{
	key int
	color Color
	height int // just to see if the height is approximately logarithmic
	left *Node
	right *Node
}

type Tree struct{
	root *Node
}
// This represent a NIL leaf
var leaf = &Node{0, BLACK, 0, nil, nil}
// Simply way to use a single instance for all the leaf.
// This is not a good implementation.


func initTree() Tree{
	var t Tree
	t.root = leaf
	leaf.left, leaf.right = leaf, leaf
	return t
}

func max(a, b int) int {
	if a <= b {
		return b
	}
	return a
}

func (n *Node) updateHeight() *Node {
	if !n.isLeaf() {
		n.height = 1 + max(n.left.height, n.right.height)
	}
	return n
}

func (n *Node) clockwise() *Node {
	pivot := n.left
	n.left = pivot.right
	pivot.right = n
	n = n.updateHeight()
	pivot = pivot.updateHeight()
	return pivot
}

func (n *Node) counterClockwise() *Node {
	pivot := n.right
	n.right = pivot.left
	pivot.left = n
	n = n.updateHeight()
	pivot = pivot.updateHeight()
	return pivot
}

func (t *Tree) Insert(key int) {
	t.root = t.root.insert(key)
	t.root.color = BLACK
}

func (n *Node) insert(key int) *Node {
	if n == leaf {
		n = &Node{key, RED, 0, leaf, leaf}
	} else {
		if n.key > key {
			n.left = n.left.insert(key)
			n = n.balanceInsertLeft()
			n = n.updateHeight()
		} else if n.key < key {
			n.right = n.right.insert(key)
			n = n.balanceInsertRight()
			n = n.updateHeight()
		} else {
			// Do nothing
			// Here you can update a key, etc...
		}
	}
	return n
}

func (n *Node) isRed() bool {
	return n.color == RED
}

func (n *Node) isDoubleBlack() bool {
	return n.color == DOUBLE_BLACK
}

func (n *Node) isLeaf() bool {
	return n == leaf
}

func (n *Node) typeOfViolationInsertLeft() InsertViolation {
	violation := INS_NONE
	if n.left.isRed() {
		if n.left.left.isRed() || n.left.right.isRed() {
			if n.right.isRed(){
				violation = INS_TYPE_1
			} else{
				if n.left.right.isRed() {
					violation = INS_TYPE_2
				} else {
					violation = INS_TYPE_3
				}
			}
		}
	}
	return violation
}

func (n *Node) typeOfViolationInsertRight() InsertViolation {
	violation := INS_NONE
	if n.right.isRed() {
		if n.right.right.isRed() || n.right.left.isRed() {
			if n.left.isRed() {
				violation = INS_TYPE_1
			} else {
				if n.right.left.isRed() {
					violation = INS_TYPE_2
				} else {
					violation = INS_TYPE_3
				}
			}
		}
	}
	return violation
}

func (n *Node) balanceInsertLeft() *Node {
	switch n.typeOfViolationInsertLeft() {
	case INS_TYPE_1:
		n.left.color, n.right.color = BLACK, BLACK
		n.color = RED
	case INS_TYPE_2:
		n.left = n.left.counterClockwise()
		fallthrough
	case INS_TYPE_3:
		n = n.clockwise()
		n.color = BLACK
		n.right.color = RED
	}
	return n
}

func (n *Node) balanceInsertRight() *Node {
	switch n.typeOfViolationInsertRight() {
	case INS_TYPE_1:
		n.left.color, n.right.color = BLACK, BLACK
		n.color = RED
	case INS_TYPE_2:
		n.right = n.right.clockwise()
		fallthrough
	case INS_TYPE_3:
		n = n.counterClockwise()
		n.color = BLACK
		n.left.color = RED
	}
	return n
}

func (t *Tree) Print() {
	// fmt.Println("Tree print:")
	t.root.print()
	fmt.Println()
}

func colorToString(c Color) string {
	switch c {
	case BLACK:
		return "black"
	case RED:
		return "red"
	default:
		return "double black"
	}
}

func (n *Node) print() {
	if !n.isLeaf() {
		n.left.print()
		fmt.Printf("Key: %d\tColor: %s\tHeight: %d\n", n.key, colorToString(n.color), n.height)
		n.right.print()
	}
}

func (t *Tree) Remove(key int) {
	t.root = t.root.remove(key)
}

func (n *Node) remove(key int) *Node{
	if !n.isLeaf() {
		if n.key > key {
			n.left = n.left.remove(key)
			n = n.balanceRemoveLeft()
		} else if n.key < key {
			n.right = n.right.remove(key)
			n = n.balanceRemoveRight()
		} else {
			n = n.deleteRoot()
		}
	}
	return n
}

func typeOfViolationDeleteLeft(n *Node) DeleteViolation {
	violation := DEL_NONE
	if n.left.isDoubleBlack() {
		if n.right.isRed() {
			violation = DEL_TYPE_1
		} else{
			if !n.right.left.isRed() && !n.right.right.isRed() {
				violation = DEL_TYPE_2
			} else {
				violation = DEL_TYPE_3
				if n.right.right.isRed() {
					violation = DEL_TYPE_4
				}
			}
		}
	}
	return violation
}

func typeOfViolationDeleteRight(n *Node) DeleteViolation {
	violation := DEL_NONE
	if n.right.isDoubleBlack(){
		if n.left.isRed() {
			violation = DEL_TYPE_1
		} else {
			if !n.left.left.isRed() && !n.left.right.isRed() {
				violation = DEL_TYPE_2
			} else {
				violation = DEL_TYPE_3
				if n.left.left.isRed() {
					violation = DEL_TYPE_4
				}
			}

		}
	}
	return violation
}

func (n *Node) balanceRemoveLeft() *Node {
	switch typeOfViolationDeleteLeft(n) {
	case DEL_TYPE_1:
		n = n.counterClockwise()
		n.left.color = RED
		n.color = BLACK
		n.left = n.left.balanceRemoveLeft()
	case DEL_TYPE_2:
		n.right.color = RED
		n.left.color = BLACK
		n = n.propagateBlack()
	case DEL_TYPE_3:
		n.right = n.right.clockwise()
		n.right.color = BLACK
		n.right.right.color = RED
	case DEL_TYPE_4:
		n = n.counterClockwise()
		n.right.color = BLACK
		n.color = n.left.color
		n.left.color = BLACK
		n.left.left.color = BLACK
	}
	return n
}

func (n *Node) balanceRemoveRight() *Node {
	switch DEL_NONE {
	case DEL_TYPE_1:
		n = n.clockwise()
		n.right.color = RED
		n.color = BLACK
		n.right = n.right.balanceRemoveRight()
	case DEL_TYPE_2:
		n.left.color = RED
		n.right.color = BLACK
		n = n.propagateBlack()
	case DEL_TYPE_3:
		n.left = n.left.counterClockwise()
		n.left.color = BLACK
		n.left.left.color = RED
	case DEL_TYPE_4:
		n = n.clockwise()
		n.left.color = BLACK
		n.color = n.right.color
		n.right.color = BLACK
		n.right.right.color = BLACK
	}
	return n
}

func (n *Node) deleteRoot() *Node {
	if n.left.isLeaf() || n.right.isLeaf() {
		tmp := n
		if n.left.isLeaf() {
			n = n.right
		} else {
			n = n.left
		}
		if !tmp.isRed() {
			n = n.propagateBlack()
		}
		tmp = nil // help the garbage collector
	} else {
		tmp := minimumDeconnection(n.right, n)
		tmp.left, tmp.right = n.left, n.right
		tmp = tmp.balanceRemoveRight()
		if !n.isRed() {
			n = n.propagateBlack()
		}
		n = tmp
	}
	return n
}

func minimumDeconnection(child, parent *Node) *Node {
	var tmp *Node
	if child.left.isLeaf() {
		tmp = child
		if child == parent.left {
			parent.left = child.right
			parent = parent.balanceRemoveLeft()
		} else {
			parent.right = child.right
			parent = parent.balanceRemoveRight()
		}
	} else {
		tmp = minimumDeconnection(child.left, child)
		tmp = tmp.balanceRemoveLeft()
	}
	return tmp
}

func (n *Node) propagateBlack() *Node {
	if ! n.isRed() {
		n.color = DOUBLE_BLACK
	} else {
		n.color = BLACK
	}
	return n
}

func main() {
  t := initTree()
	for i := 0; i < 1000; i++ {
		t.Insert(i)
	}
	t.Print()

	for i := 0; i < 1000; i++ {
		t.Remove(i)
	}
	t.Print()
}
#+end_src
*** Run
1. ~go run main.go | awk '{print $NF}' | sort -gr | head -1 → 16~ which is bound, comment t.Remove first.
2. ~go run main.go | awk '/black/{print $4}' | wc -l → 987 black nodes and 13 red nodes.~
3. ~go run main.go | awk '{print $NF}' | sort -gr | head -1 → 16~ this means that all the nodes are removed correctly.
**** NOTE
This example is not exhaustive.
